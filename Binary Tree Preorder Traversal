#Runtime: 12 ms, faster than 96.16% of Python online submissions for Binary Tree Preorder Traversal.
#Memory Usage: 13.4 MB, less than 48.17% of Python online submissions for Binary Tree Preorder Traversal.

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def preorderTraversal(self, root):
        res = []
        self.preorder(root, res)
        return res
    
    def preorder(self, root, res):
        if root:
            res.append(root.val)
            self.preorder(root.left, res)
            self.preorder(root.right, res)
            
#Runtime: 8 ms, faster than 99.66% of Python online submissions for Binary Tree Preorder Traversal.
#Memory Usage: 13.3 MB, less than 78.15% of Python online submissions for Binary Tree Preorder Traversal.

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def preorderTraversal(self, root):
        res = []
        stack = [root]
        while stack:
            node = stack.pop()
            if node:
                res.append(node.val)
                stack.append(node.right)
                stack.append(node.left)
        return res
