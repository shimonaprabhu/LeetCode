#Runtime: 20 ms, faster than 47.37% of Python online submissions for Binary Tree Inorder Traversal.
#Memory Usage: 13.3 MB, less than 76.49% of Python online submissions for Binary Tree Inorder Traversal.

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def inorderTraversal(self, root):
        res = []
        self.inorder(root, res)
        return res
    
    def inorder(self, root, res):
        if root:
            self.inorder(root.left, res)
            res.append(root.val)
            self.inorder(root.right, res)
        
#Runtime: 16 ms, faster than 76.24% of Python online submissions for Binary Tree Inorder Traversal.
#Memory Usage: 13.4 MB, less than 76.49% of Python online submissions for Binary Tree Inorder Traversal.

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def inorderTraversal(self, root):
        res, stack = [], []
        while True:
            while root:
                stack.append(root)
                root = root.left
            if not stack:
                return res
            node = stack.pop()
            res.append(node.val)
            root = node.right
        
