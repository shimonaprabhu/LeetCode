#Runtime: 200 ms, faster than 97.34% of Python3 online submissions for Squares of a Sorted Array.
#Memory Usage: 15.8 MB, less than 89.17% of Python3 online submissions for Squares of a Sorted Array.

class Solution:
    def sortedSquares(self, nums: List[int]) -> List[int]:
        nums_s = [x*x for x in nums]
        return(sorted(nums_s))
        
#Runtime: 228 ms, faster than 61.36% of Python3 online submissions for Squares of a Sorted Array.
#Memory Usage: 16.2 MB, less than 30.50% of Python3 online submissions for Squares of a Sorted Array.

class Solution:
    def sortedSquares(self, nums: List[int]) -> List[int]:
        
        n = len(nums)
        i = 0
        j = n-1
        res = [0]*n
        
        for p in range(n-1, -1, -1):
            if abs(nums[i]) > abs(nums[j]):
                res[p] = nums[i]*nums[i]
                i+=1
            else:
                res[p] = nums[j]*nums[j]
                j-=1
        
        return res
